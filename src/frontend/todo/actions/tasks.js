require('es6-promise').polyfill();
import fetch from 'isomorphic-fetch';


// Use the same value as the variable name.
export const TASK_REQ_LIST = 'TASK_REQ_LIST';
export const TASK_RECV_LIST = 'TASK_RECV_LIST';
export const TASK_RECV_LIST_PRIORITIZED = 'TASK_RECV_LIST_PRIORITIZED';
export const TASK_REQ_NEWITEM = 'TASK_REQ_NEWITEM';
export const TASK_RECV_ITEM = 'TASK_RECV_ITEM';
export const TASK_ERROR = 'TASK_ERROR';
export const TASK_REMOVE_ITEM = 'TASK_REMOVE_ITEM';
export const TASK_UPDATE_ITEM = 'TASK_UPDATE_ITEM';
export const TASK_POSTPONE_ITEM = 'TASK_POSTPONE_ITEM';


export function fetchList(){
	return (dispatch) => {
		dispatch({
			type: TASK_REQ_LIST
		});

		return $.ajax('/v1/tasks')
		.then(
			result => {
				dispatch({type: TASK_RECV_LIST, list: result.list});
				dispatch({type: TASK_RECV_LIST_PRIORITIZED, list: result.plist})
			}
			, err => disptch({type: TASK_ERROR, err})
		)
	}
}

let count = 0;
export function makeNewItem(item){
	return function(dispatch){
		let tid = ++count;
		// We need tid even if we already have task's id in Task model.
		// We get task's id only after server successfuly processed POST requst.
		// When the requst returns completed task object, we replace temporary
		// task object with recieved task object.
		// We use tid to locate the tmp task in the list.
		item.tid = tid;
		var taskID=null; // We don't have taskID yet because it is generated by server.

		dispatch({
			type: TASK_REQ_NEWITEM
			, item: item
		});

		return $.ajax({
			url: '/v1/tasks'
			, type: 'post'
			, data: item
		})
		.then(
			item => dispatch({type: TASK_RECV_ITEM, item, tid, taskID})
			, err => dispatch({type: TASK_ERROR, err})
		);
	}
}

export function removeItem(taskID){
	return function(dispatch){
		// No dispatch fore remove request because there is no need to change state
		// until we get response from server.
		return $.ajax({
			url: '/v1/tasks/' + taskID
			, type: 'delete'
		})
		.then(
			dispatch({type: TASK_REMOVE_ITEM, taskID})
			, err => dispatch({type: TASK_ERROR, err})
		);
	}
}

export function postpone(item){
	return function(dispatch){
		dispatch(TASK_POSTPONE_ITEM)

		return $.ajax({
			url: '/v1/task/${item.id}/postpone'
			, type: 'put'
		})
		.then(function(result){
			if(result.list){
				dispatch({
					type: TASK_RECV_LIST
					, list: result.list
				})
			}

			if(result.plist){
				dispatch({
					type: TASK_RECV_LIST_PRIORITIZED
					, list: plist
				})
			}
		})
	}
}

export function updateItem(taskID, patchRequest){
	return function(dispatch){
		dispatch({
			type: TASK_UPDATE_ITEM
			, taskID: taskID
			, data: patchRequest
		});
		var tid=null; // we have to send null tid to conform TASK_RECV_ITEM's format.

		return $.ajax({
			url: '/v1/tasks/' + taskID
			, type: 'patch'
			, data: patchRequest
		})
		.then(
			item => dispatch({type: TASK_RECV_ITEM, item, tid, taskID})
			, err => dispatch({type: TASK_ERROR, err})
		);
		;
	}
}
